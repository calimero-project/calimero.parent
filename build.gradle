buildscript {
	repositories {
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.36.0'
	id "com.github.spotbugs" version "4.6.0"
}

ext.desc = 'Calimero multi-project build'

allprojects { proj ->
    repositories {
		mavenLocal()
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

	apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

	ext.desc = 'Calimero - KNX network library'

	group = 'com.github.calimero'
	version = '2.5-M1'
	def packager = 'Calimero Project'
	def projectUrl = "https://github.com/calimero-project/${project.name}"

	sourceCompatibility = 11
	targetCompatibility = 11

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
		from("${projectDir}") {
            include 'LICENSE*'
            into "META-INF"
        }
		from("${projectDir}") {
		    include 'README.md', 'pom.xml', 'build.gradle', 'gradle*/**'
        }
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
		from("${projectDir}") {
            include 'LICENSE*'
            into "META-INF"
        }
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	jar {
		from ('.') {  include 'LICENSE*' into 'META-INF' }
		manifest {
			attributes 'Implementation-Title': "${project.name}",
					   'Implementation-Version': version,
					   'Built-By': "${packager}",
					   'Url': "${projectUrl}"
		}
	}
    
	wrapper {
		gradleVersion = '6.7'
    }
    
    bintray {
        user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintray.key') ? project.property('bintray.key') : System.getenv('BINTRAY_KEY')
        publications = ['maven']
        publish = false
        dryRun = false
        pkg {
            repo = 'calimero'
            name = proj.name == 'calimero.parent' ? 'calimero-parent' : proj.name
            desc = proj.ext.desc
            licenses = ['GPL-2.0+CE']
            vcsUrl = "${projectUrl}.git"
            version {
                name = proj.version
                desc = project.ext.desc + ' version ' + project.version
                released  = new Date()
                
                gpg {
                  sign = true
                  passphrase = project.hasProperty('bintray.gpg.passphrase') ? project.property('bintray.gpg.passphrase')
                      : System.getenv('BINTRAY_GPG_PASSPHRASE')
                }
            }
        }
    }

    publishing {
      publications {
        maven(MavenPublication) {
            if (project.name != 'calimero.parent') {
              from components.java
              artifact sourcesJar {
                classifier "sources"
              }
              artifact javadocJar {
                classifier "javadoc"
              }
            }

            artifactId proj.name == 'calimero.parent' ? 'calimero-parent' : proj.name
            
            if (proj.name == 'calimero-testnetwork') {
              pom {
                name = 'Calimero test network'
                description = 'Test network with KNXnet/IP server and virtual subnet'
                url = 'https://github.com/calimero-project/calimero-testnetwork'
                licenses {
                  license {
                    name = "GNU General Public License, version 2, with the Classpath Exception"
                    distribution = "repo"
                  }
                }
                developers {
                  developer {
                    name = "Boris Malinowsky"
                    email = "b.malinowsky@gmail.com"
                  }
                }
              }
              pom.withXml {
                  asNode().appendNode('properties').appendNode('project.build.sourceEncoding', 'UTF-8')
              }

            } else {

              pom.withXml { provider ->
                def builder = provider.asString()
                builder.length = 0 // delete existing content
                builder.append(file("pom.xml").text)
                
                if (project.name != 'calimero.parent') {
                    def root = asNode()
                    root.appendNode('groupId', group)
                    root.appendNode('version', version)
                }
              }

            }
        }
      }
      repositories {
          maven {
              credentials { 
                  username findProperty('mavenUser')
                  password findProperty('mavenPassword')
              }

              def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
              def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
              url version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
          }
      }
    }
}

subprojects {
	apply plugin: 'com.github.spotbugs'

	ext.junitJupiterVersion = '5.8.0-M1'

	compileJava.options*.compilerArgs = [
		'-Xlint:all',
		'-Xlint:-options',
//		'-Werror'
	]

	compileTestJava.options*.compilerArgs = [
		'-Xlint:all',
		'-Xlint:-try',
	]

	compileJava {
		options.debugOptions.debugLevel = "source,lines,vars" // { source, lines, vars } or "none"
//		options.debug = false
	}

	spotbugs {
		ignoreFailures = true
//		effort = "max"
		reportLevel = "high"
//		includeFilter = rootProject.file("config/spotbugs/includeFilter.xml")
//		excludeFilter = rootProject.file("config/spotbugs/excludeFilter.xml")
		extraArgs = [ '-html:fancy-hist.xsl' ]
	}
	spotbugsMain {
		reports {
			html.enabled = true
			xml.enabled false
		}	
	}

	javadoc {
		options.encoding = 'UTF-8'
		options.addStringOption('overview', 'src/overview.html')
		options.addBooleanOption('html5', true)
	}

	test {
		useJUnitPlatform()
		testLogging {
			events "skipped", "failed"
			exceptionFormat "full"
//			showStandardStreams true
		}
	}

	dependencies {
		api 'org.slf4j:slf4j-api:1.7.30'

		testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
		testCompileOnly 'junit:junit:4.13.2'
		testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}"
	}
}

dependencyUpdates.dependsOn gradle.includedBuilds*.task(':dependencyUpdates')

clean.dependsOn gradle.includedBuilds*.task(':clean')

assemble.dependsOn gradle.includedBuilds*.task(':assemble')
